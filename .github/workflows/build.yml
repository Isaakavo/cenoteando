#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main

jobs:
  #Sonar's Job
  sonar:
    name: SonarCloud analysis
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'
      - name: Write Properties
        uses: christian-draeger/write-properties@1.1.0
        with:
          path: './backend/src/main/resources/application.properties'
          property: |
            'logging.level.root'
            'server.error.include-binding-errors'
            'server.error.include-stacktrace'
            'server.error.include-exception'
            'arango.host'
            'jwtSecretKey'
          value: |
            'INFO'
            'never'
            'never'
            'false'
            'localhost'
            ${{ secrets.JTW_SECRET_KEY }}
      # Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -f backend/pom.xml -B verify sonar:sonar -Dsonar.projectKey=cenoteandoDB_cenoteando -Dsonar.organization=cenoteandodb -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
  #Build's job
  build:
    #Depends on sonar's job
    needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -f backend/pom.xml -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: backend
          #From this path
          path: backend/target/backend-0.0.1-SNAPSHOT.jar
  #Deploy's job
  deploy:
    #Depends on build's job
    needs: build
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: backend
      - name: Upload to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}        
          username: ${{ secrets.SERVER_USERNAME }}      
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "target/backend-0.0.1-SNAPSHOT.jar"
          target: "~/source/backend.jar"
      - name: Restart Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}        
          username: ${{ secrets.SERVER_USERNAME }}      
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            sudo /etc/init.d/backend stop
            mv ~/source/backend.jar ~/source/backend-old.jar
            mv ~/source/backend-latest.jar ~/source/backend.jar
            sudo rm -rf /etc/init.d/backend
            sudo ln -s -f ~/source/backend.jar /etc/init.d/backend
            sudo /etc/init.d/backend start
            update-rc.d backend defaults