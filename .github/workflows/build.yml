#Workflow name
name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main

jobs:
  #Build Frontend's job
  build_frontend:
    name: Build (frontend)
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      #Install frontend dependencies
      - name: Install dependencies
        run: npm install --prefix frontend
      #Build the application using NPM
      - name: Build
        run: npm run build --prefix frontend
      - name: Upload Frontend
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: frontend
          #From this path
          path: frontend/dist
  #Build Backend's job
  build_backend:
    name: Build (backend)
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -f backend/pom.xml -B package -DskipTests -Pprod
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: backend
          #From this path
          path: backend/target/backend.jar
  #Deploy's job
  deploy:
    #Depends on build's job
    needs: [build_backend, build_frontend]
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - name: Download backend
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: backend
          path: "dist/backend"
      - name: Download frontend
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: "dist/frontend"
      - name: Upload to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}        
          username: ${{ secrets.SERVER_USERNAME }}      
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "dist"
          target: "~"
      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}        
          username: ${{ secrets.SERVER_USERNAME }}      
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: ~/deploy.sh